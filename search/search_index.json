{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lab.delthia.com","text":"<p>En este subdominio se puede encontrar documentaci\u00f3n en forma de gu\u00edas para aprender a utilizar diferentes herramientas</p>"},{"location":"#guias-existentes","title":"Gu\u00edas existentes:","text":"<p>Info</p> <p>Por ahora no hay ninguna gu\u00eda terminada. Mientras que no haya unas cuantas gu\u00edas terminadas, existir\u00e1 una lista como la inferior en la que se organizar\u00e1 la informaci\u00f3n que se pretende a\u00f1adir</p>"},{"location":"#czjqqkd0guias-en-proceso-o-planeadasczjqqkd1","title":"Gu\u00edas en proceso o planeadas:","text":"<ul> <li> Gu\u00eda de arduino (en proceso)<ul> <li> \u00bfQu\u00e9 es arduino?</li> <li> Primer ejemplo con Arduino</li> <li> Las salidas y entradas. Digital y anal\u00f3gico (te\u00f3rico)</li> <li> Pulsador. Entradas y condicionales</li> <li> Potenci\u00f3metro y LDR. Entradas anal\u00f3gicas</li> <li> PWM. Salidas \"anal\u00f3gicas\" y bucles</li> <li> Condicionales II</li> <li> Bucles II</li> <li> Las librer\u00edas</li> <li> Otros componentes, sensor de temperatura y humedad.</li> <li> Otros componentes II, pantallas LCD y OLED</li> </ul> </li> <li> Gu\u00eda de OpenSCAD (Idea)</li> </ul>"},{"location":"arduino/","title":"Arduino","text":"<p>Esta secci\u00f3n de la documentaci\u00f3n sirve como una peque\u00f1a gu\u00eda de iniciaci\u00f3n a la programaci\u00f3n de microcontroladores con arduino y como recopilaci\u00f3n de ejemplos de c\u00f3digo para diferentes componentes o funcionalidades. De esta manera, las primeras p\u00e1ginas estar\u00e1n m\u00e1s explicadas, mientras que las posteriores ser\u00e1n ejemplos de c\u00f3digos comentados, partiendo de la informaci\u00f3n dada en las primeras.</p>"},{"location":"arduino/01-introduccion/","title":"\u00bfQu\u00e9 es Arduino?","text":"<p>Arduino es una plataforma de microcontroladores, peque\u00f1as placas que podemos programar para interactuar con diferentes componentes mediante entradas y salidas digitales o anal\u00f3gicas.</p> <p>La placa m\u00e1s com\u00fan para aprender a utilizar esta plataforma es el Arduino UNO, que aunque es bastante b\u00e1sica, tiene todo lo necesario para empezar, incluyendo un conversor USB a Serie, para que podamos programarla desde el USB de nuestro ordenador, y su procesador, el atmega 328P se encuentra en un z\u00f3calo, para que podamos reemplazarlo en caso de que falle.</p> <p>Hoy en d\u00eda existen otras placas con m\u00e1s funcionalidades y precios m\u00e1s competitivos, como el esp32, que por un precio menor incluye conectividad wifi, bluetooth, es m\u00e1s compacto, tiene un mayor n\u00famero de entradas y salidas e incluso incluye un par de salidas anal\u00f3gicas, pero ya que tradicionalmente se suele aprender con el arduino uno, y es m\u00e1s sencillo al trabajar a 5V, en lugar de a 3V como otras placas, ser\u00e1 lo que utilicemos.</p>"},{"location":"arduino/01-introduccion/#el-arduino-uno","title":"El Arduino UNO","text":"<p>Es posible que esta sea la placa m\u00e1s vers\u00e1til para empezar. Tiene suficientes entradas y salidas para la mayor\u00eda de proyectos y es compatible con muchos shields.</p> <p> </p> Pinout del Arduino UNO R3. Fuente: arduino.cc"},{"location":"arduino/01-introduccion/#la-protoboard","title":"La protoboard","text":"<p>La protoboard es una herramienta muy \u00fatil que nos permite conectar componentes entre s\u00ed. Es un lugar en el que podemos colocar los componentes para conectarlos al Arduino</p>"},{"location":"arduino/02-parpadeo-led/","title":"Haciendo parpadear un LED. Primer proyecto con Arduino","text":"LED parpadeando - Resultado <p>El objetivo de esta gu\u00eda ser\u00e1 tener una primera experiencia con arduino, tanto en lado del hardware como en el del software; es decir, esta gu\u00eda abarca tanto como montar un circuito b\u00e1sico con arduino como programar este circuito para que funcione como nosotos deseamos.</p>"},{"location":"arduino/02-parpadeo-led/#montaje","title":"Montaje","text":"<p>La pr\u00e1ctica se puede realizar con el led interno del Arduino, que est\u00e1 conectado al pin 13, o utilizando uno externo. El siguiente esquema muestra la conexi\u00f3n de un led al Arduino</p> <p> </p> Esquema de montaje con un led externo <p>Para conectar un led al Arduino necesitaremos una resistencia, ya que el arduino funciona a 5V, y si no lo fundiremos. Un valor t\u00edpico para esta resistencia ser\u00eda de alrededor de 220\u03a9. Para montar el esquema tendremos que conectar el positivo del led (pata larga), el pin 12 del Arduino, en este caso, y la negativa (pata corta) a tierra a trav\u00e9s de la resistencia.</p>"},{"location":"arduino/02-parpadeo-led/#programa","title":"Programa","text":"<p>El programa deber\u00e1 de hacer parpadear el led, encendi\u00e9ndolo y apag\u00e1ndolo en un bucle. El diagrama de flujo del programa es el siguiente:</p> <p><pre><code>flowchart TD\nA([Inicio]) --&gt; B[Encender el led]\nB --&gt; |Esperar 1000ms| C[Apagar el led]\nC --&gt; |Esperar 1000ms| B</code></pre> </p> Esquema de flujo del programa <p>Para ello, crearemos un sketch nuevo en el ide de arduino. Haz clic en los  para ver qu\u00e9 hace cada parte</p> parpadeo_led.ino<pre><code>const int led = 13;  // El led est\u00e1 conectado al pin 13 (3)\nvoid setup () { // Funci\u00f3n Inicial (1)\npinMode(led, OUTPUT);  // El led es una salida (4)\n}\nvoid loop () {  // Bucle Principal (2)\ndigitalWrite(led, HIGH);  // Encender el led (5)\ndelay(1000);  // Esperar 1000ms (1 segundo)\ndigitalWrite(led, LOW); // Apagar el led\ndelay(1000);  // Esperar 1000ms (1 segundo)\n}\n</code></pre> <ol> <li>El <code>void setup</code> es la funci\u00f3n inicial de arduino, que se ejecuta una sola vez al inicio del programa, al arrancar o reiniciar el arduino</li> <li>El <code>void loop</code> es la funci\u00f3n principal de arduino, que se ejecuta en bucle desde que se arranca el arduino, justo despu\u00e9s del <code>void setup</code>. En esta funci\u00f3n escribiremos aquellas instrucciones que queremos que se ejecuten repetidamente mientras que el arduino est\u00e9 encendido</li> <li>Al principio definimos el led, indicando en qu\u00e9 pin est\u00e1 conectado</li> <li>Ahora indicamos que es una salida</li> <li>El LED es una salida digital, que podr\u00e1 estar encendida,  HIGH, o apagada,  LOW</li> </ol> <p>Ahora que conocemos el c\u00f3digo del programa y tenemos el circuito montado, podemos conectar el arduino al ordenador con el cable USB tipo B y cargar el programa tocando en la flecha  en el ide de arduino o con el atajo de teclado Ctrl+U</p> <p> Tip: Puedes hacer clic en el icono  para verificar el programa antes de subirlo. El IDE nunca cargar\u00e1 un programa err\u00f3neo, ya que no se podr\u00e1 compilar, pero de esta manera puedes comprobar el programa sin tener que conectar el Arduino al ordenador. </p> <p>Practica con lo aprendido</p> <p>Prueba a modificar el programa para que funcione de manera diferente, estas son algunas ideas:</p> <ul> <li>Modifica los intervalos</li> <li>Crea un patr\u00f3n, por ejemplo, largo-corto-largo-corto-corto</li> <li>A\u00f1ade otro led, puedes utilizar el integrado en el arduino o a\u00f1adir otro</li> </ul>"},{"location":"arduino/03-entradas-salidas/","title":"Las entradas y salidas. Digital y anal\u00f3gico","text":"<p>En esta p\u00e1gina se explican las diferencias entre los dos grupos de pines que existen en el arduino, y los dos modos en los que pueden operar</p>"},{"location":"arduino/03-entradas-salidas/#las-entradas-y-salidas","title":"Las entradas y salidas","text":""},{"location":"arduino/03-entradas-salidas/#digital-y-analogico","title":"Digital y anal\u00f3gico","text":""},{"location":"arduino/04-pulsador/","title":"El pulsador. Los condicionales","text":"Montaje del esquema con dos pulsadores y un led <p>En esta pr\u00e1ctica se introducen las entradas digitales mediante los pulsadores, con dos ejemplos, con un \u00fanico pulsador y con dos.</p>"},{"location":"arduino/04-pulsador/#ejemplo-i","title":"Ejemplo I","text":""},{"location":"arduino/04-pulsador/#montaje","title":"Montaje","text":""},{"location":"arduino/04-pulsador/#diagrama","title":"Diagrama","text":"<p><pre><code>flowchart TD\nA([Inicio]) --&gt; B{\"\u00bfPulsador activado?\"}\nB --&gt;|S\u00ed| C[Encender LED]\nB --&gt;|No| D[Apagar el led]\nC &amp; D --&gt; E([Fin])\nE -.-&gt; A</code></pre> </p> Diagrama del primer ejemplo"},{"location":"arduino/04-pulsador/#programa","title":"Programa","text":"pulsador.ino<pre><code>const int led = 9;\nconst int btn = 8;\nvoid setup () {\npinMode(led, OUTPUT);\npinMode(btn, INPUT);\n}\nvoid loop () {\nif(digitalRead(btn) == HIGH) {\ndigitalWrite(led, HIGH);\n}\nelse {\ndigitalWrite(led, LOW);\n}\n}\n</code></pre>"},{"location":"arduino/04-pulsador/#ejemplo-ii-operador-and","title":"Ejemplo II. Operador AND","text":"<p>En este ejemplo, haremos una puerta and con dos pulsadores y un led. A\u00f1adimos otro pulsador al circuito anterior, en esta ocasi\u00f3n conectado al pin 10. La tabla de verdad del operador AND es:</p> Entrada I Entrada II Salida 0 0 0 1 0 0 0 1 0 1 1 1 <p><pre><code>flowchart TD\nA([Inicio]) --&gt; B{\"Dos pulsadores activos\"}\nB --&gt;|S\u00ed| C[Encender LED]\nB --&gt;|No| D[Apagar LED]\nC --&gt; F([Fin])\nD --&gt; F\nF -.-&gt; A</code></pre> </p> Diagrama del bucle principal puerta_and.ino<pre><code>const int sw1 = 10; // Pulsador 1 en el pin 10\nconst int sw2 = 9;  // Pulsador 2 en el pin 9\nconst int led = 8;  // LED en el pin 8\n// Variables para almacenar las lecturas de los pulsadores\nint lectura1 = 0;\nint lectura2 = 0;\nvoid setup() {\npinMode(sw1, INPUT);  // Los pulsadores son entradas\npinMode(sw2, INPUT);\npinMode(led, OUTPUT); // El LED es una salida\n}\nvoid loop() {\n// Al inicio del bucle almacenamos los valores de los pulsadores\nlectura1 = digitalRead(sw1); // Lectura digital: (1)\nlectura2 = digitalRead(sw2);\n// Si los dos botones est\u00e1n pulsados\nif(lectura1 == HIGH &amp;&amp; lectura2 == HIGH) { // Los condicionales (2) (3)\ndigitalWrite(led, HIGH);  // Encendemos el LED\n}\n// En caso contrario\nelse {\ndigitalWrite(led, LOW); // Apagamos el led\n}\n}\n</code></pre> <ol> <li>El pulsador es una entrada digital. Por eso, leemos su estado con <code>digitalRead</code> y lo almacenamos en una variable. Si el pulsador est\u00e1 activo, la variable equivaldr\u00e1 a HIGH, y si no lo est\u00e1, su valor ser\u00e1 LOW</li> <li>Es importante poner dos iguales en las comparaciones, ya que un \u00fanico igual impone la igualdad, mientras que dos indican que es una comparaci\u00f3n</li> <li>Los dos ampersand (&amp;), funcionan como el operador l\u00f3gico AND, por lo que la condici\u00f3n solo ser\u00e1 verdadera si se cumplen las dos. Tambi\u00e9n se puede escribir dos barras || para el operador l\u00f3gico OR</li> </ol> <p>Practica con lo aprendido</p> <p>Ahora puedes probar a convertir la puerta AND del segundo ejemplo en una puerta OR, o en una NOR</p>"},{"location":"arduino/05-analogico/","title":"Potenci\u00f3metro y LDR. Las entradas anal\u00f3gicas","text":"potenciometro.ino<pre><code>const int pot = 0;\nvoid setup () {\nSerial.begin(9600);\n}\nvoid loop () {\nSerial.println(analogRead(pot));\ndelay(50);\n}\n</code></pre>"},{"location":"arduino/06-pwm/","title":"PWM. \"Salidas anal\u00f3gicas\"","text":"<pre><code>for (i = 0; i&lt;10; i++) {    // Contar de 0 a 9 (1)\nanalogWrite(led, i);\n}\n</code></pre> <ol> <li>Para hacer un bucle for, deberemos especificar el valor inicial, el valor final, y si contar hacia arriba o hacia abajo</li> </ol> pwm.ino<pre><code>const int led = 9;  // Debe de ser un pin marcado con ~\nvoid setup () {\npinMode(led, OUTPUT);\n}\nvoid loop () {\nfor(i=0; i&lt;255; i++) {\nanalogWrite(led, i);\ndelay(20);\n}\nfor(i=254; i&gt;0; i--) {\nanalogWrite(led, i);\ndelay(20);\n}\n}\n</code></pre>"},{"location":"docker/","title":"Albergando servicios con docker","text":"<p>Docker es una utilidad libre para gestionar aplicaciones en contenedores. Resulta muy \u00fatil por su f\u00e1cil administraci\u00f3n y actualizaci\u00f3n.</p> <p>Existe una WebUI para gestionar docker llamada portainer. Para instalar portainer sigue esta gu\u00eda Lista de servicios: - Coder: Editor c\u00f3digo en la web. Muy pr\u00e1ctico para trabajar en cualquier ordenador que tenga un navegador web. P\u00e1gina del proyecto</p> <ul> <li> <p>Gitea: Servidor git simple. \u00datil para albergar tus repositorios de manera local, o para esas cosas que no quieres subir a GitHub o otro proveedor de git, pero que se beneficiar\u00edan de utilizar git; o simplemente para tener una copia local de tus repositorios fuera de tu ordenador. P\u00e1gina del proyecto</p> </li> <li> <p>Grafana. Grafana y Prometheus pueden utilizase para ecoger m\u00e9tricas de un endpoint de prometheys y mostrarlas con grafana. P\u00e1gina del proyecto</p> </li> <li> <p>home-assistant</p> </li> <li> <p>Jellyfin: Un buen servidor multimedia. \u00datil para albergar todos esos CDs y DVDs que tienes por ah\u00ed pero que ya no utilizas porque prefieres eschucharlos a trav\u00e9s de una plataforma de streaming. P\u00e1gina del proyecto</p> </li> <li> <p>Nextcloud: Probablemente la parte m\u00e1s importante del sistema. Nextcloud es un servidor para compartir archivos que tambi\u00e9n incluye un calendario y un gestor de contactos. P\u00e1gina del proyecto</p> </li> <li> <p>Uptime-Kuma: Un servicio de monitorizaci\u00f3n que puede notificarte cuando algo va mal. Uptime Kuma</p> </li> <li> <p>Vaultwarden: Un gestor de contrase\u00f1as. Esta imagen se basa y funciona con los clientes de bitwarden, pero incorpora todas las caracter\u00edsticas \"premium\" de manera gratuita. Vaultwarden</p> </li> </ul>"},{"location":"docker/gitea/","title":"Instalaci\u00f3n de gitea","text":"<p>Gitea es un servidor de git con bastantes caracter\u00edsticas. Lo utilizan proyectos como codeberg, pero tambi\u00e9n tiene un lugar en un servidor local, para ayudar a gestionar y sincronizar repositorios entre ordenadores sin tener que subirlos a un servidor desconocido.</p> <p>La parte m\u00e1s complicada de la configuraci\u00f3n del contenedor es hacer funcionar correctamente el ssh en el puerto 22, ya que colisiona con el del hu\u00e9sped si est\u00e1 en el mismo puerto. Aunque existen m\u00e9todos para situar el ssh del contenedor en el mismo puerto, la manera m\u00e1s f\u00e1cil de solucionarlo es utilizar un puerto diferente del valor por defecto para gitea y/o para el hu\u00e9sped.</p> <p>El siguiente docker-compose instalar\u00e1 un contenedor de gitea sin una base de datos externa. Suficiente para una instalaci\u00f3n peque\u00f1a con un usuario, pero probablemente no rinda lo suficiente si lo que se busca es una instalaci\u00f3n con m\u00e1s usuarios y proyectos.</p> gitea.yaml<pre><code>version: \"3\"\nnetworks:\ngitea:\nexternal: false\nservices:\nserver:\nimage: gitea/gitea:1.17.1\ncontainer_name: gitea\nenvironment:\n- USER_UID=1000\n- USER_GID=1000\nrestart: always\nnetworks:\n- gitea\nvolumes:\n- ~/docker/volumes/gitea:/data\n- /etc/timezone:/etc/timezone:ro\n- /etc/localtime:/etc/localtime:ro\nports:\n- \"3000:3000\"\n- \"222:22\"\n</code></pre> <p>Configuraci\u00f3n de nginx para gitea:</p> gitea-docker<pre><code>server {\n    listen 80;\n    server_name git.dominio.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"docker/nextcloud/","title":"Instalaci\u00f3n de nextcloud","text":"<p>Nextcloud es probablemente el contenedor m\u00e1s importante en mi d\u00eda a d\u00eda. Consiste en un sistema completo para subir y gestionar archivos, calendarios, contactos, tareas y hasta noticias y p\u00f3dcasts. Aunque su rendimiento no es el mejor (independientemente del hardware en el que se ejecute), es suficientemente r\u00e1pido y la cantidad de funcionalidades que tienen le hacen una utilidad excepcional, ya sea para un \u00fanico usuario, para compartir archivos con familiares y amigos, o para trabajar en grupo.</p> <p>Tambi\u00e9n existe la posibilidad de conectar nextcloud con una suite de oficina para editar archivos desde el navegador de manera colaborativa, pero no he conseguido poner a funcionar el servidor integrado de collabora en la raspberry, el contenedor de collabora por separado, ni la suite de onlyoffice.</p> <p>El siguiente docker-compose instal\u00e1 un contenedor de nextcloud con una base de datos mariadb. nextcloud.yml<pre><code>version: '2'\nservices:\ndb:\ncontainer_name: nextcloud-mariadb\nimage: mariadb:10.5\nrestart: always\ncommand: --transaction-isolation=READ_COMMITED --binlog-format=ROW\nvolumes:\n- ~/docker/volumes/nextcloud-db:/var/lib/mysql\nenvironment:\n- MYSQL_ROOT_PASSWORD=nextclouddbpassword\n- MYSQL_PASSWORD=nextclouddbpassword\n- MYSQL_DATABASE=nextcloud\n- MYSQL_USER=nextcloud\napp:\ncontainer_name: nextcloud\nimage: nextcloud:latest\nrestart: always\nports:\n- 8080:80\nvolumes:\n- ~/docker/volumes/nextclodud:/var/www/html\nenvironment:\n- MYSQL_PASSWORD=nextclouddbpassword\n- MYSQL_DATABASE=nextcloud\n- MYSQL_USER=nextcloud\n- MYSQL_HOST=db\n</code></pre></p> <p>Configuraci\u00f3n de nginx para nextcloud:</p> nextcloud-docker<pre><code>server {\n    server_name cloud.dominio.com;\n\n    add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";\n\n    location / {\n        proxy_pass http://localhost:8080;\n\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains; preload\";\n        client_max_body_size 0;\n\n        access_log /var/log/nginx/nextcloud.access.log;\n        error_log /var/log/nginx/nextcloud.error.log;\n    }\n\n    location /.well-known/carddav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n\n    location /.well-known/caldav {\n        return 301 $scheme://$host/remote.php/dav;\n    }\n}\n</code></pre>"},{"location":"docker/portainer/","title":"Instalaci\u00f3n de portainer","text":"<p>En un servidor con docker instalado, portainer se puede instalar con el siguiente comando <pre><code>docker run -t -d -p 9000:9000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock d -v ~/docker/volumes/portainer:/data portainer/portainer-ce:latest\n</code></pre></p> <p>El siguiente paso es navegar a la IP del servidor en el puerto 9000. Ver\u00e1s un formulario en el que crear un usuario.</p> <p>Despu\u00e9s de iniciar sesi\u00f3n, esta ser\u00e1 la p\u00e1gina principal:</p> <p></p> <p>Al hacer clic en local aparecer\u00e1 una lista de opciones para gestionar docker en el servidor que ejecuta portainer. En la barra lateral aparecer\u00e1 un panel con la opci\u00f3n Templates, a partir del cual se pueden crear contenedores de manera autom\u00e1tica.</p> <p></p>"},{"location":"docker/uptime-kuma/","title":"Instalaci\u00f3n de uptime kuma","text":"<p>Uptime Kuma es un contenedor que monitoriza el estado de los servicios y te notifica cuando alguno falla.</p> <p>Instalarlo es muy f\u00e1cil:</p> uptime-kuma.yml<pre><code>version: '3'\nservices:\nuptime-kuma:\ncontainer_name: uptime-kuma\nimage: louislam/uptime-kuma:1\nports:\n- 3001:3001\nvolumes:\n- ~/docker/volumes/uptime-kuma:/app/data\nrestart: always\n</code></pre>"},{"location":"docker/vaulwarden/","title":"Instalaci\u00f3n de bitwarden","text":"<p>Vaultwarden es una imagen de servidor alternativa compatible con la de bitwarden.</p> <p>Bitwarden es un gestor de contrase\u00f1as con extensiones para los navegadores y aplicaciones para los sistemas operativos m\u00f3viles.</p> <p>El funcionamiento de este contenedor es bastante sencillo, por lo que solo necesita un volumen para los datos y abrir el puerto correspondiente en docker.</p> vaultwarden.yml<pre><code>version: '3'\nservices:\nvaultwarden:\ncontainer_name: vaultwarden\nimage: vaultwarden/server:latest\nports:\n- 82:80\nvolumes:\n- ~/docker/volumes/vw-data:/data\nrestart: always\nenvironment:\n- SIGNUPS_ALLOWED=false\n</code></pre> <p>Configuraci\u00f3n de nginx para vaultwarden:</p> vaultwarden-docker<pre><code>server {\n    server_name vault.dominio.com;\n\n    location / {\n        proxy_pass http://localhost:82;\n    }\n}\n</code></pre>"},{"location":"misc/flowchart/","title":"Flowchart","text":"<pre><code>flowchart TD\nA([Inicio]) --&gt; B[Encender el led]\nB --&gt; |Esperar 1000ms| C[Apagar el led]\nC --&gt; |Esperar 1000ms| B</code></pre>"},{"location":"openscad/openscad/","title":"OpenSCAD","text":"<p>OpenSCAD es un programa de dise\u00f1o 3D libre que funciona por c\u00f3digo; debido a esto, despu\u00e9s de aprender un sencillo lenguage de scripting, resulta bastante c\u00f3modo el dise\u00f1o de piezas param\u00e9tricas sencillas con este programa.</p> <p>Aunque con este programa posiblemente no sea f\u00e1cil realizar un dise\u00f1o extremadamente complejo, como se podr\u00eda hacer con otros programas tales como FreeCAD, es suficiente para replicar o reparar alguna pieza, y para el dise\u00f1o general de piezas imprimibles en 3D.</p>"}]}